{
    "enabled": true,
    "forkProcessing": "enabled",
    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
    "extends": [
        ":dependencyDashboard",
        "config:base",
        "helpers:pinGitHubActionDigests",
    ],
    // Disable reviewers getting added by renovate to limit notification noise
    "reviewersFromCodeOwners": false,
    "timezone": "America/New_York",
    "rebaseStalePrs": true,
    "dependencyDashboard": true,
    "dependencyDashboardTitle": "Renovate Dashboard ðŸ¤–",
    "rebaseWhen": "conflicted",
    "commitBodyTable": true,
    "suppressNotifications": ["prIgnoreNotification"],
    "pre-commit": {
        "enabled": true
    },
    "helm-values": {
        "fileMatch": [".*\\.ya?ml$"]
    },
    "kubernetes": {
        "fileMatch": [".*\\.ya?ml$"],
        "ignorePaths": [
            ".github"
        ]
    },
    "hostRules": [
        {
            "matchHost": "registry1.dso.mil",
            "hostType": "docker",
            "description": "Encrypted creds for registry1, scoped to this Github org using: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#encrypted",
            "encrypted": {
                "username": "wcFMA/xDdHCJBTolAQ/+PxbkYaUY7kT7zKPQtr36yJkmEOprPC6HnehmYLopwvpFYTiUmiVkWxNpsec7+Mrujx4avodXIyLPM2hUHRKZl2C/KEjJmoMbp0hh4p8kEFpd+0KZidI5xRe1JxLmUYS6g53jiN7yO6P8OGXabPZt3+8t33AL6PzNkaUXUmSpRl6InXqMbwIlNq0GG0ud2bB1OOXUPzCl1ANfhYKwNLLdDDOHr+kYupExAyp1z2pWSO5KJ0RbIWymKJyTIbRN9Pl/7guZGneZXv6neWP8WxaiN1gBQMiHWeUW9AHNuKcZEmHWvL0gCVP9DXlAKpoy5fcZfEQj9xy1mwO4+cfg1aYEnImECgVryCWjt2+ZJNYx+/JlUQJYimDwUt3OJ74mAPxsdNM5HTj5m7F3bNTFkl2ss8LnJ2oP3IzV8bsmdIF+KsB8aFeMm/SjGUDH+tmtwwtZXVJzJEmBRGw5jsPvOwb1KmEGvT/zNPP19cR57syKBhCw09fXzMC4FV7esfTtakcG9gGlM7mGaj5yyoCVKeeuMFueFpc2zASi1udm7DA9vn9gDbgfD3EpE1Gx6n/7Bp4uIhwlJU1ymqQ3W1Hke7iIe3OSaffbqxfZV0MFFwxvNnocwyWAxD/4KqA4+N8G2KmyU/sj/nG15UFQnU9CMTqJU2xsbZ1QnoUxIbIuYPa/Wv7SdgFcY6qiXySvuoUoPf7YSZ+z8mkKRWTGVW6FchbjfcgWQ7e//a6BY8gHA+i/JCKjhb8iGupUVNS64X9D1A1bIOgPLQmR4GKc4pj3ihGpssscvBjcbeRmvgy03iY3jIb7JTXC2EVgObao64bNJwyVfBepqYMRS88",
                "password": "wcFMA/xDdHCJBTolAQ/8DgMyRTHUFZCU4bb5pz0475W1AcyUglR1a8aXgDJdYXgcNxWDirm1+ZUg4c9fyC1NaGn8S+a4eUzax2Qhh4tE8/yjoqgtDgf4XHpu7biI0Sej8t+4GSjg+x2mlaQXX3RX8meHCyXB6bp1W6QQZzLzIDi69ZFRGnfm+WcgH7OjX2PYwDexr0kWMItYClSwlfQSoLmkDhFfjlYoUkIh5O2UiqlXhUkECyNvFBIUTm9lCqOksB8nJ2LkJP5sjOcvxtXtANdBhlAWMndSla+Q635/L3HJ9aR/25+Bz4JhWdtP3nVU0NYRmqMx7ZrwqlIAylSSFyL9DHi6nUuV4/zwe3vcQxIMuJLVwuTqi5svkFm4g7JkDP+O7hteuH+0H4QkWvd8Ubifi6cpgLBlS46yPTP4vaF8POmtw51Ui0A1SgQkbh3x2Nf6P3BcT2forb1kxj3fVbqTiki64k8ry/JHsMA2uCU4YNz4kk4W2wL2DA6k8k3HIswgvKvrrcJV3HpDrjWKzxdTCxFgf0HbSELdH9bhdxWF91Kmg4uHnMttowvzqTHP+Z0RCX1nhlf/uIIkPRnxbDLV1HnN7RFsffl9TcObrSHfx0bJdB8TJQJ95oM7/HZt3BGFtUuXRJTkbYDgyBJjwmJUPJLVGHCW8v2RmBrLKxMyGJQWyZU0o3ruGFv8UGvSdgG/+jTnvXrU2PjdxgjcjH7Y8sZ9UBEsjN4kOF898pH7hTbNX7nhMsGWHCEQvSkAobnJkGQjJFWHZ5qZybuTXHFu/Z7bgdbGvhDoo3L4aHCNpk7s5Zbtt2YKBJgQTNttb2UGNl6CVuQ1souWQCKuPc+kEEo9mJY"
            }
        }
    ],
    "regexManagers": [
        // Matches github-tags pointing to items in githubusercontent (i.e. https://github.com/defenseunicorns/uds-core/blob/e45de0e5917a2ca6c3e30e593e2d9a8d393849a9/.vscode/settings.json#L12)
        {
            "fileMatch": [".*(\\.ya?ml|\\.json)$"],
            "matchStrings": [
                // Test: https://regex101.com/r/r1nWoZ/1
                "https:\\/\\/raw\\.githubusercontent\\.com\\/(?<depName>[^\\/]+\\/[^\\/]+)\\/(?<currentValue>[^\\/]+)"
            ],
            "versioningTemplate": "semver-coerced",
            "datasourceTemplate": "github-tags"
        },
        // Matches npm modules in npm install commands (i.e. https://github.com/defenseunicorns/uds-core/blob/f8e65159873f87be5912b73cc6f0a5ff26b7bed0/.github/workflows/commitlint.yaml#L26)
        {
            "fileMatch": [".*(\\.ya?ml|\\.json)$"],
            "matchStrings": [
                // Test: https://regex101.com/r/321nL5/1
                "npm install ([\\w\\- ]+ )?(?<depName>@?[^\\s]*?)@(?<currentValue>[^\\s]+)"
            ],
            "datasourceTemplate": "npm"
        },
        // Matches specified datasources where a colon separates the version on the following line (i.e. https://github.com/defenseunicorns/zarf/blob/7e91d3b9823b52fe6d0f563d692c8af57faa6005/examples/big-bang/zarf.yaml#L5)
        {
            "fileMatch": [".*\\.ya?ml$"],
            "matchStrings": [
                // Test: https://regex101.com/r/d9t0lt/1
                "# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?( registryUrl=(?<registryUrl>.*?))?\\s.*:\\s*['\"]?(?<currentValue>[v0-9].*?)['\"]?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
            "extractVersionTemplate": "{{#if extractVersion}}{{{extractVersion}}}{{else}}^(?<version>.*)${{/if}}"
        },
        // Matches specified datasources where an environment variable separates the version on the following line (i.e. https://github.com/defenseunicorns/uds-common/blob/ce3ba974ef3ff88058809f4b9a78da281a65ffa0/.github/actions/setup/action.yaml#L9)
        {
            "fileMatch": [".*\\.ya?ml$", ".*\\.sh$"],
            "matchStrings": [
                // Test: https://regex101.com/r/b53bEF/2
                "# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?( registryUrl=(?<registryUrl>.*?))?\\s.*[A-Z]+=['\"]?(?<currentValue>[v0-9].*?)['\"]?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
            "extractVersionTemplate": "{{#if extractVersion}}{{{extractVersion}}}{{else}}^(?<version>.*)${{/if}}"
        },
        // Matches specified datasources for brew where an @ separates the version on the following line (i.e. https://github.com/defenseunicorns/uds-core/blob/5a2666f6a5ba89686c6dc1fecb0db98512b1b9f8/.github/actions/setup/action.yaml#L32)
        {
            "fileMatch": [".*\\.ya?ml$"],
            "matchStrings": [
                // Test: https://regex101.com/r/p3Cpjx/1
                "# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\s.*brew.*@\\s*['\"]?(?<currentValue>[v0-9].*?)['\"]?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
            "extractVersionTemplate": "^v(?<version>.*)$"
        },
        // Matches individual images in a `zarf.yaml`'s `images:` section that are tagged with a version (allowing for # renovate overrides)
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStrings": [
                // Test: https://regex101.com/r/Bd8IBp/1
                "- ['\"]?(?<depName>[^\"'\\s]+):(?<currentValue>[^\"'\\s]+)['\"]?( # renovate:( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?)?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}docker{{/if}}",
            "extractVersionTemplate": "{{#if extractVersion}}{{{extractVersion}}}{{else}}^(?<version>.*)${{/if}}",
            "datasourceTemplate": "docker"
        },
        // Matches individual helm repo charts in a `zarf.yaml`'s `charts:` section that specify `version` then `url` 
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/nruXFi/1
                "(?m)name: [\"']?(?<depName>.+?)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$(.|\\n)*?url: [\"']?(?<registryUrl>.+?)[\"']?$"
            ],
            "datasourceTemplate": "helm"
        },
        // Matches individual helm repo charts in a `zarf.yaml`'s `charts:` section that specify `url` then `version` 
        {
            "fileMatch": [ "(^|/)zarf.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/iqP5RJ/1
                "(?m)name: [\"']?(?<depName>.+?)[\"']?$(.|\\n)*?url: [\"']?(?<registryUrl>.+?)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "helm"
        },
        // Matches individual helm git charts in a `zarf.yaml`'s `charts:` section that specify `version` then `url` 
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/PIIH1p/1
                "(?m)name:(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$(.|\\n)*?url: [\"']?(?<depName>.+?\\.git)[\"']?$"
            ],
            "datasourceTemplate": "git-tags",
            // Match the version from the tag. Test: https://regex101.com/r/dzQZiE/1
            "versioningTemplate": "regex:^v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(-[\\w\\.]+\\.(?<build>\\d+))?"
        },
        // Matches individual helm git charts in a `zarf.yaml`'s `charts:` section that specify `url` then `version` 
        {
            "fileMatch": [ "(^|/)zarf.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/m71Sn5/1
                "(?m)name:(.|\\n)*?url: [\"']?(?<depName>.+?\\.git)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "git-tags",
            // Match the version from the tag. Test: https://regex101.com/r/dzQZiE/1
            "versioningTemplate": "regex:^v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(-[\\w\\.]+\\.(?<build>\\d+))?"
        },
        // Matches individual helm oci charts in a `zarf.yaml`'s `charts:` section that specify `version` then `url` 
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/gYGkgq/1
                "(?m)name:(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$(.|\\n)*?url: [\"']?oci:\\/\\/(?<depName>.+?)[\"']?$"
            ],
            "datasourceTemplate": "docker"
        },
        // Matches individual helm oci charts in a `zarf.yaml`'s `charts:` section that specify `url` then `version` 
        {
            "fileMatch": [ "(^|/)zarf.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/VDMzhy/1
                "(?m)name:(.|\\n)*?url: [\"']?oci:\\/\\/(?<depName>.+?)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "docker"
        },
        // Matches individual kustomizations in a `zarf.yaml`'s `manifests:` section using a github url with a ref
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the manifests section. Test: https://regex101.com/r/BCfsGu/1
                "(?m)manifests:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a manifests entry. Test: https://regex101.com/r/UjQa51/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/cumJ2Y/1
                "(?m)name:(.|\\n)*?kustomizations:(.|\n)*?- [\"']?github.com\\/(?<depName>.+?)\\/\\/.*\\?ref=(?<currentValue>.+?)[\"']?$"
            ],
            "versioningTemplate": "semver-coerced",
            "datasourceTemplate": "github-tags"
        },
        // Matches oci packages in a `uds-bundle.yaml`'s `zarf-packages:` section that specify `repository` then `ref` 
        {
            "fileMatch": [ "(^|/)uds-bundle.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the parts of a chart entry. Test: https://regex101.com/r/IFgEw0/1
                "(?m)repository: [\"']?(?<depName>.+?)[\"']?$(.)*(\n.*){0,2}ref: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "docker"
        }
    ],
    "packageRules": [
        // Excludes a bad tag in registry1 from when this image was based on UBI
        {
            "matchPackageNames": ["registry1.dso.mil/ironbank/big-bang/base"],
            "allowedVersions": "!/8.4/"
        }
    ]
}
