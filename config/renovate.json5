{
    "enabled": true,
    "forkProcessing": "enabled",
    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
    "extends": [
        ":dependencyDashboard",
        "config:base",
    ],
    // Disable reviewers getting added by renovate to limit notification noise
    "reviewersFromCodeOwners": false,
    "timezone": "America/New_York",
    "rebaseStalePrs": true,
    "schedule": ["after 7am and before 9am every weekday"],
    "dependencyDashboard": true,
    "dependencyDashboardTitle": "Renovate Dashboard ðŸ¤–",
    "rebaseWhen": "conflicted",
    "commitBodyTable": true,
    "suppressNotifications": ["prIgnoreNotification"],
    "pre-commit": {
        "enabled": true
    },
    "helm-values": {
        "fileMatch": [".*\\.ya?ml$"]
    },
    "kubernetes": {
        "fileMatch": [".*\\.ya?ml$"],
        "ignorePaths": [
            ".github"
        ]
    },
    "hostRules": [
        {
            "matchHost": "registry1.dso.mil",
            "hostType": "docker",
            "description": "Encrypted creds for registry1, scoped to this Github org using: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#encrypted",
            "encrypted": {
                "username": "wcFMA/xDdHCJBTolAQ//a+5GNAOsD/UOKnqJDdbPRr73EXRgyRdtMOIqDyjGZIKcdVo64StgUb1O37O5bazoyGeYkcISaWjInxRuoBOxqFhdo5cTUIJavjm2Sn75OWCDBUr2Q5/OSluQDbp7QO9g4+cHxcjtldlMswZg0RIoSX8rtAcNvJePvuWDKRHmUSDbWrNoAPaqOUvBIUF+BUR8o2UtKY4c986B9sqz1/ZiyL7vmenuoFi36MPpq123b6xra9/Q8Zb+AGZY6guhI0kmmSvLPwuNpU/W9ocpaUW1jOgJdYDowZqoTC27uozw1rCq38ybL94GMeG+pzWJd7LBVbfpDnU10j5UC5l5coxghh8dBYNzirsRbYW9KMV3CSeRNxOqfUuJ9AfWekCBWQMkueDtop+lzZhpvsPnXYTV6V0+TE+W5lg0wApcGUNM5XsEHV/gchSULZCWUTHpyZfkUoyc3dXax7K9LawrNLLpJg3Oz0c5Y4WXS1SqfY3U6n84Q95URZC+uRl5BqzBwQSQYbWsnon+g3My+GukdhHlynoiJwQo/ch5gIfgiA59VrL/H9L/ABAyYzQ7KUEguQrNh8hbNG0dfpMLMIrdUDhno5vTeccx2k5R/EOQopxZCY+k2Xfqgg5okAG9eQKhhGKcQD+A8y6X2V0cPkHQ35TCi5AObrcQiiemBZUy3G6IJIrSdQFEs+WcBPT4GPgOAsZWUJKU4RU3qdhdUGZy/VwJSsB05/E65fRTGl5i0e5PhIoIbh4uaPgWnbJyvKi87bIIJhe9bxP/m2lDs5GPeXSrvBb0GT3t9l3aHUYW3uKp5GABwmvX6ptMbNoYoQRSLptR/gE80RPFSQ",
                "password": "wcFMA/xDdHCJBTolAQ//bu2ZFKmMysjpkOkwQSgLigvUMDw1SHpp1YN8y1LerOqMfTocdswihRFbB/FFRP/bYG1ByhnAvxqhbdV0TRQqYTRXZehrlT+SDEVEJyK9eGS+ozClbccG64ebZSJ4y9rMFW3sK4Ja9ZyAEsX0S4vO88XwJhtOYmMGTXLlcSfiANQB8a9jISzov27FQOzdPx6cEd19FGxmX5vAdH9FWDwhVA6QSTrip4h5tZ6THylNc3md2TGRYUVTxMtsZdp/bnhv+I3LqmodR0vEP9Or/dbhtqnMy2sdS6HsANUaZ+7j4D0qDL7EEcxk+CHM5lM2sSz6u4+J4u01XDkn0HJ/mShPDSWUoU01Va/ZpRL8zw/bjKApDBSgvBOwF7eXfUKqLrg2zURm2quUf7XwuVTXmBMg3DSEuRBlW8kM0rGWGyv7U62sx+2zjK0v2uNHJz0hzWaEfriOQu4B7/avb+CIupfVYGNllyMTuB2ySDMLKN3Q/EB7q97apWqwcnThxRhK7t3e59ea4JDxodxeeTG3m/UgBLBlXCutk7BsC7NQPaSeOzV7mw6AOVQz+Bn0DAGd1x03ITYAcgfYvSW7VCfhrvnmuSVICHA7GTYevC7RBYhexWdgHZb98mIt1vVA2C+h7eqsx+xWhHQFE2+lNRTRmj9ccU/6qz1+3zqHdMQ/WD8MLofSdgFLU/A7qljUm/dk1MEVMtGznukdRpJJV4PsEcwh2OV/9is5KPyFQ83M7sl3/fY+CBaHFEiT4j/bSBznmxL3TuAjMdIT7j0cNsOxnsHllgRHL1qG3S2ZmAQ0Ex4gIUUGn2VbZLyRogJspsjxx5ZYuuYVfhtSaTU"
            }
        }
    ],
    "regexManagers": [
        // Matches github-tags pointing to items in githubusercontent (i.e. https://github.com/defenseunicorns/uds-core/blob/e45de0e5917a2ca6c3e30e593e2d9a8d393849a9/.vscode/settings.json#L12)
        {
            "fileMatch": [".*(\\.ya?ml|\\.json)$"],
            "matchStrings": [
                // Test: https://regex101.com/r/r1nWoZ/1
                "https:\\/\\/raw\\.githubusercontent\\.com\\/(?<depName>[^\\/]+\\/[^\\/]+)\\/(?<currentValue>[^\\/]+)"
            ],
            "versioningTemplate": "semver-coerced",
            "datasourceTemplate": "github-tags"
        },
        // Matches npm modules in npm install commands (i.e. https://github.com/defenseunicorns/uds-core/blob/f8e65159873f87be5912b73cc6f0a5ff26b7bed0/.github/workflows/commitlint.yaml#L26)
        {
            "fileMatch": [".*(\\.ya?ml|\\.json)$"],
            "matchStrings": [
                // Test: https://regex101.com/r/321nL5/1
                "npm install ([\\w\\- ]+ )?(?<depName>@?[^\\s]*?)@(?<currentValue>[^\\s]+)"
            ],
            "datasourceTemplate": "npm"
        },
        // Matches specified datasources where a colon separates the version on the following line (i.e. https://github.com/defenseunicorns/zarf/blob/7e91d3b9823b52fe6d0f563d692c8af57faa6005/examples/big-bang/zarf.yaml#L5)
        {
            "fileMatch": [".*\\.ya?ml$"],
            "matchStrings": [
                // Test: https://regex101.com/r/d9t0lt/1
                "# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?( registryUrl=(?<registryUrl>.*?))?\\s.*:\\s*['\"]?(?<currentValue>[v0-9].*?)['\"]?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
            "extractVersionTemplate": "{{#if extractVersion}}{{{extractVersion}}}{{else}}^(?<version>.*)${{/if}}"
        },
        // Matches specified datasources where an environment variable separates the version on the following line (i.e. https://github.com/defenseunicorns/uds-common/blob/ce3ba974ef3ff88058809f4b9a78da281a65ffa0/.github/actions/setup/action.yaml#L9)
        {
            "fileMatch": [".*\\.ya?ml$"],
            "matchStrings": [
                // Test: https://regex101.com/r/b53bEF/1
                "# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?( registryUrl=(?<registryUrl>.*?))?\\s.*[A-Z]*=\\s*['\"]?(?<currentValue>[v0-9].*?)['\"]?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
            "extractVersionTemplate": "^v(?<version>.*)$"
        },
        // Matches specified datasources for brew where an @ separates the version on the following line (i.e. https://github.com/defenseunicorns/uds-core/blob/5a2666f6a5ba89686c6dc1fecb0db98512b1b9f8/.github/actions/setup/action.yaml#L32)
        {
            "fileMatch": [".*\\.ya?ml$"],
            "matchStrings": [
                // Test: https://regex101.com/r/p3Cpjx/1
                "# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\s.*brew.*@\\s*['\"]?(?<currentValue>[v0-9].*?)['\"]?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
            "extractVersionTemplate": "^v(?<version>.*)$"
        },
        // Matches individual images in a `zarf.yaml`'s `images:` section that are tagged with a version (allowing for # renovate overrides)
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStrings": [
                // Test: https://regex101.com/r/Bd8IBp/1
                "- ['\"]?(?<depName>[^\"'\\s]+):(?<currentValue>[^\"'\\s]+)['\"]?( # renovate:( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?)?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
            "extractVersionTemplate": "{{#if extractVersion}}{{{extractVersion}}}{{else}}^(?<version>.*)${{/if}}",
            "datasourceTemplate": "docker"
        },
        // Matches individual helm repo charts in a `zarf.yaml`'s `charts:` section that specify `version` then `url` 
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/nruXFi/1
                "(?m)name: [\"']?(?<depName>.+?)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$(.|\\n)*?url: [\"']?(?<registryUrl>.+?)[\"']?$"
            ],
            "datasourceTemplate": "helm"
        },
        // Matches individual helm repo charts in a `zarf.yaml`'s `charts:` section that specify `url` then `version` 
        {
            "fileMatch": [ "(^|/)zarf.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/iqP5RJ/1
                "(?m)name: [\"']?(?<depName>.+?)[\"']?$(.|\\n)*?url: [\"']?(?<registryUrl>.+?)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "helm"
        },
        // Matches individual helm git charts in a `zarf.yaml`'s `charts:` section that specify `version` then `url` 
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/PIIH1p/1
                "(?m)name:(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$(.|\\n)*?url: [\"']?(?<depName>.+?\\.git)[\"']?$"
            ],
            "datasourceTemplate": "git-tags",
            // Match the version from the tag. Test: https://regex101.com/r/dzQZiE/1
            "versioningTemplate": "regex:^v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(-[\\w\\.]+\\.(?<build>\\d+))?"
        },
        // Matches individual helm git charts in a `zarf.yaml`'s `charts:` section that specify `url` then `version` 
        {
            "fileMatch": [ "(^|/)zarf.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/m71Sn5/1
                "(?m)name:(.|\\n)*?url: [\"']?(?<depName>.+?\\.git)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "git-tags",
            // Match the version from the tag. Test: https://regex101.com/r/dzQZiE/1
            "versioningTemplate": "regex:^v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(-[\\w\\.]+\\.(?<build>\\d+))?"
        },
        // Matches individual helm oci charts in a `zarf.yaml`'s `charts:` section that specify `version` then `url` 
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/gYGkgq/1
                "(?m)name:(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$(.|\\n)*?url: [\"']?oci:\\/\\/(?<depName>.+?)[\"']?$"
            ],
            "datasourceTemplate": "docker"
        },
        // Matches individual helm oci charts in a `zarf.yaml`'s `charts:` section that specify `url` then `version` 
        {
            "fileMatch": [ "(^|/)zarf.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/VDMzhy/1
                "(?m)name:(.|\\n)*?url: [\"']?oci:\\/\\/(?<depName>.+?)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "docker"
        },
        // Matches individual kustomizations in a `zarf.yaml`'s `manifests:` section using a github url with a ref
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the manifests section. Test: https://regex101.com/r/BCfsGu/1
                "(?m)manifests:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a manifests entry. Test: https://regex101.com/r/UjQa51/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/cumJ2Y/1
                "(?m)name:(.|\\n)*?kustomizations:(.|\n)*?- [\"']?github.com\\/(?<depName>.+?)\\/\\/.*\\?ref=(?<currentValue>.+?)[\"']?$"
            ],
            "versioningTemplate": "semver-coerced",
            "datasourceTemplate": "github-tags"
        },
        // Matches oci packages in a `uds-bundle.yaml`'s `zarf-packages:` section that specify `repository` then `ref` 
        {
            "fileMatch": [ "(^|/)uds-bundle.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the parts of a chart entry. Test: https://regex101.com/r/IFgEw0/1
                "(?m)repository: [\"']?(?<depName>.+?)[\"']?$(.)*(\n.*){0,2}ref: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "docker"
        }
    ],
    "packageRules": [
        // Excludes a bad tag in registry1 from when this image was based on UBI
        {
            "matchPackageNames": ["registry1.dso.mil/ironbank/big-bang/base"],
            "allowedVersions": "!/8.4/"
        }
    ]
}
