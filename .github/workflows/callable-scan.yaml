# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

name: Callable-Scan

on:
  workflow_call:
    inputs:
      baseRepo:
        description: The base url to look for packages at
        default: ghcr.io/defenseunicorns/packages/uds
        type: string
      udsCliVersion:
        description: The uds-cli version to install
        # renovate: datasource=github-tags depName=defenseunicorns/uds-cli versioning=semver
        default: 0.22.0
        type: string
      zarfYamlPath:
        description: The path to the zarf.yaml file
        default: zarf.yaml
        type: string

# Permissions for the GITHUB_TOKEN used by the workflow.
permissions:
  contents: read # Allows reading the content of the repository.
  packages: read # Allows reading the content of the repository's packages.
  id-token: write # Allows authentication to Chainguard via OIDC.
  pull-requests: write # Allows writing the scan results comment to the pull request.

# Abort prior jobs in the same workflow / PR
concurrency:
  group: scan-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get-sboms:
    runs-on: ubuntu-latest
    outputs:
      sboms: ${{ steps.get-sboms.outputs.sboms }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install UDS CLI
        uses: defenseunicorns/setup-uds@ab842abcad1f7a3305c2538e3dd1950d0daacfa5 # v1.0.1
        with:
          version: v${{ inputs.udsCliVersion }}

      - name: Setup crane
        uses: imjasonh/setup-crane@v0.4

      - name: Get SBOMs
        id: get-sboms
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          BASE_REPO: ${{ inputs.baseRepo }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          PACKAGES=""
          PACKAGE_NAME=$(echo "$BASE_REPO" | awk -F'/' 'BEGIN{OFS="/"} {if (NF > 2) {for (i=3; i<=NF; i++) printf (i==3 ? $i : "/"$i); print ""} else print ""}')/$(yq e '.metadata.name' zarf.yaml)

          # Check for the public package
          if gh api --silent /orgs/"$REPO_OWNER"/packages/container/"$PACKAGE_NAME" >/dev/null 2>&1; then
            PACKAGES="$PACKAGES $PACKAGE_NAME"
          fi

          # Check for the private package variant
          if [[ $REPO_OWNER == "defenseunicorns" ]]; then
            PRIVATE_PACKAGE=$(echo "$PACKAGE_NAME" | sed 's/packages/&\/private/')
          else
            PRIVATE_PACKAGE="private/$PACKAGE_NAME"
          fi
          if gh api --silent /orgs/"$REPO_OWNER"/packages/container/"$PRIVATE_PACKAGE" >/dev/null 2>&1; then
            PACKAGES="$PACKAGES $PRIVATE_PACKAGE"
          fi

          COMBINED_JSON="[]"

          FLAVORS=$(uds zarf tools yq -r '.components[].only.flavor' ${{ inputs.zarfYamlPath }})

          for PACKAGE in ${PACKAGES}; do
            for FLAVOR in ${FLAVORS}; do
              TAG=$(gh api -H "Accept: application/vnd.github.v3+json" "/orgs/${REPO_OWNER}/packages/container/${PACKAGE}/versions" | jq -r "[.[] | select(.metadata.container.tags[] | contains(\"${FLAVOR}\"))] | .[0].metadata.container.tags[0]")

              if [[ "$TAG" == "null" ]]; then
                echo "No tag found for package ${PACKAGE} with flavor ${FLAVOR}"
                continue
              else
                IMAGE="ghcr.io/${REPO_OWNER}/${PACKAGE}"

                manifestDigest=$(crane manifest "${IMAGE}:${TAG}" | jq -r '.manifests[0].digest')

                tarDigest=$(crane manifest "${IMAGE}@${manifestDigest}" | jq -r '.layers[] | select(.annotations["org.opencontainers.image.title"] == "sboms.tar") | .digest')

                sbomList=$(crane blob "${IMAGE}@${tarDigest}" | tar -tv | grep json | awk '{print $6}')

                for sbom in $sbomList; do
                  COMBINED_JSON=$(echo "${COMBINED_JSON}" | jq -c --arg imageDigest "${IMAGE}@${tarDigest}" --arg sbomName "${sbom}" '. + [{imageDigest: $imageDigest, sbomName: $sbomName}]')
                done
              fi
            done
          done

          echo "sboms=${COMBINED_JSON}" >> "$GITHUB_OUTPUT"

  get-images:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.get-images.outputs.images }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install UDS CLI
        uses: defenseunicorns/setup-uds@ab842abcad1f7a3305c2538e3dd1950d0daacfa5 # v1.0.1
        with:
          version: v${{ inputs.udsCliVersion }}

      - name: Get Images
        id: get-images
        run: |
          IMAGES=$(uds zarf tools yq -r -o=json -I=0 '[.components.[].images] | flatten | unique | map(select((test(".sig") | not) and (test(".att") | not)))' ${{ inputs.zarfYamlPath }})
          echo "images=$IMAGES" >> "$GITHUB_OUTPUT"

  scan-sboms:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.get-sboms.outputs.sboms) }}
    needs: get-sboms
    steps:
      - name: Setup crane
        uses: imjasonh/setup-crane@v0.4

      - name: Download SBOM
        run: |
          crane blob "${{ matrix.imageDigest }}" | tar -xvf - "${{ matrix.sbomName }}"

      - name: Scan SBOM
        uses: anchore/scan-action@v6
        id: scan
        with:
          sbom: ${{ matrix.sbomName }}
          fail-build: false
          output-format: cyclonedx-json

      - name: Format artifact name
        id: format-artifact-name
        shell: bash
        run: |
          NAME=$(jq -r '.metadata.component.name + "@" + .metadata.component.version' ${{ steps.scan.outputs.cyclonedx-json }})
          NAME="${NAME//\//_}"
          NAME="${NAME/docker.io_library_/}"
          mv ${{ steps.scan.outputs.cyclonedx-json }} "${NAME}.json"
          echo "artifactName=${NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: scan-sbom-${{ steps.format-artifact-name.outputs.artifactName }}
          path: ${{ steps.format-artifact-name.outputs.artifactName }}.json

  scan-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.get-images.outputs.images) }}
    needs: get-images
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install UDS CLI
        uses: defenseunicorns/setup-uds@ab842abcad1f7a3305c2538e3dd1950d0daacfa5 # v1.0.1
        with:
          version: v${{ inputs.udsCliVersion }}

      - name: Environment setup
        run: |
            uds run actions:setup-environment \
            --set REGISTRY1_USERNAME="${{ secrets.IRON_BANK_ROBOT_USERNAME }}" \
            --set REGISTRY1_PASSWORD="${{ secrets.IRON_BANK_ROBOT_PASSWORD }}" \
            --set GH_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            --set CHAINGUARD_IDENTITY="${{ secrets.CHAINGUARD_IDENTITY }}"
        shell: bash

      - name: Scan image
        id: scan
        uses: anchore/scan-action@v6.1.0
        with:
          image: ${{ matrix.image }}
          fail-build: false
          output-format: cyclonedx-json

      - name: Format artifact name
        id: format-artifact-name
        shell: bash
        run: |
          NAME=$(jq -r '.metadata.component.name + "@" + .metadata.component.version' ${{ steps.scan.outputs.cyclonedx-json }})
          NAME="${NAME//\//_}"
          NAME="${NAME/docker.io_library_/}"
          mv ${{ steps.scan.outputs.cyclonedx-json }} "${NAME}.json"
          echo "artifactName=${NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: scan-image-${{ steps.format-artifact-name.outputs.artifactName }}
          path: ${{ steps.format-artifact-name.outputs.artifactName }}.json

  compare-scans:
    runs-on: ubuntu-latest
    needs: [scan-sboms, scan-images]
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: defenseunicorns/uds-pk
          ref: vuln-scan-compare

      - name: Download sbom scan results from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: sbom-scan-results
          pattern: scan-sbom-*
          merge-multiple: true

      - name: Download image scan results from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: image-scan-results
          pattern: scan-image-*
          merge-multiple: true

      - name: Compare scans
        shell: bash
        run: |
          sbomScans=$(ls sbom-scan-results)
          imageScans=$(ls image-scan-results)

          # the repo we cloned has uds-pk that has the command compare-scans. We need to find scans with the same image name and compare them using the uncompiled go
          # binary. The output is bunch of markdown.

          COMMENT_MARKDOWN=""

          for imageScan in $imageScans; do
            imageName=$(echo "$imageScan" | cut -d "@" -f 1)

            for sbomScan in $sbomScans; do
              sbomName=$(echo "$sbomScan" | cut -d "@" -f 1)

                if [[ "$imageName" == "$sbomName" ]]; then
                # Allow different images is necessary because of implied urls with docker hub images (i.e. docker.io/library isn't always present)
                COMMENT_MARKDOWN+=$(go run main.go compare-scans "sbom-scan-results/$sbomScan" "image-scan-results/$imageScan" --allow-different-images)
                COMMENT_MARKDOWN+=$'\n'
              fi
            done
          done

          echo "${COMMENT_MARKDOWN}" > comment.md

      - name: Post comment
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: scan-results
          file-path: comment.md
