# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

name: Callable-Scan

on:
  workflow_call:
    inputs:
      udsCliVersion:
        description: The uds-cli version to install
        # renovate: datasource=github-tags depName=defenseunicorns/uds-cli versioning=semver
        default: 0.27.7
        type: string
      zarfYamlPath:
        description: The path to the zarf.yaml file
        default: zarf.yaml
        type: string
      packagePrefix:
        description: The prefix for public packages
        default: ""
        type: string
      privatePackagePrefix:
        description: The prefix for private packages
        default: private
        type: string

# Permissions for the GITHUB_TOKEN used by the workflow.
permissions:
  contents: read # Allows reading the content of the repository.
  packages: read # Allows reading the content of the repository's packages.
  pull-requests: write # Allows writing the scan results comment to the pull request.

# Abort prior jobs in the same workflow / PR
concurrency:
  group: scan-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get-sboms:
    runs-on: ubuntu-latest
    outputs:
      sboms: ${{ steps.get-sboms.outputs.sboms }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install UDS CLI
        uses: defenseunicorns/setup-uds@ab842abcad1f7a3305c2538e3dd1950d0daacfa5 # v1.0.1
        with:
          version: v${{ inputs.udsCliVersion }}

      - name: Environment setup
        run: |
          echo "MARU_AUTH=\"{\"raw.githubusercontent.com\": \"${{ secrets.GITHUB_TOKEN }}\"}\"" >> "GITHUB_ENV"
          uds run actions:setup-environment \
          --set REGISTRY1_USERNAME="${{ secrets.IRON_BANK_ROBOT_USERNAME }}" \
          --set REGISTRY1_PASSWORD="${{ secrets.IRON_BANK_ROBOT_PASSWORD }}" \
          --set GH_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
          --set RAPIDFORT_USERNAME="${{ secrets.RAPIDFORT_USERNAME }}" \
          --set RAPIDFORT_PASSWORD="${{ secrets.RAPIDFORT_PASSWORD }}"
        shell: bash

      - name: Get SBOMs
        id: get-sboms
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          PACKAGE_PREFIX: ${{ inputs.packagePrefix }}
          PRIVATE_PACKAGE_PREFIX: ${{ inputs.privatePackagePrefix }}
        run: |
          PACKAGES=""
          PACKAGE_NAME=$(yq e '.metadata.name' ${{ inputs.zarfYamlPath }})
          echo "Package name: ${PACKAGE_NAME}"
          # Set public prefix based on org and if package prefix is empty
          if [[ $REPO_OWNER == "defenseunicorns" ]]; then
            PUBLIC_URL="packages/uds/${PACKAGE_NAME}"
          elif [[ -z "$PACKAGE_PREFIX" ]]; then
            PUBLIC_URL="${PACKAGE_NAME}"
          else
            PUBLIC_URL="${PACKAGE_PREFIX}/${PACKAGE_NAME}"
          fi

          PUBLIC_PACKAGE_ENCODED=$(echo "$PUBLIC_URL" | sed 's/\//%2F/g')

          echo "Public package URL: ${PUBLIC_URL}"

          # Set private prefix based on org and if private package prefix is empty
          if [[ $REPO_OWNER == "defenseunicorns" ]]; then
            PRIVATE_URL="packages/private/uds/${PACKAGE_NAME}"
          elif [[ -z "$PRIVATE_PACKAGE_PREFIX" ]]; then
            PRIVATE_URL="${PACKAGE_NAME}"
          else
            PRIVATE_URL="${PRIVATE_PACKAGE_PREFIX}/${PACKAGE_NAME}"
          fi

          PRIVATE_PACKAGE_ENCODED=$(echo "$PRIVATE_URL" | sed 's/\//%2F/g')

          echo "Private package URL: ${PRIVATE_URL}"

          # Check for the public package
          if gh api --silent /orgs/"${REPO_OWNER}"/packages/container/"${PUBLIC_PACKAGE_ENCODED}" >/dev/null 2>&1; then
            PACKAGES="$PACKAGES $PUBLIC_URL"
          fi

          # Check for the private package
          if gh api --silent /orgs/"${REPO_OWNER}"/packages/container/"${PRIVATE_PACKAGE_ENCODED}" >/dev/null 2>&1; then
            PACKAGES="$PACKAGES $PRIVATE_URL"
          fi

          FLAVORS=$(uds zarf tools yq -r '.components[].only.flavor' zarf.yaml)

          for PACKAGE in ${PACKAGES}; do
            for FLAVOR in ${FLAVORS}; do
              PACKAGE_ENCODED=$(echo "$PACKAGE" | sed 's/\//%2F/g')
              TAG=$(gh api -H "Accept: application/vnd.github.v3+json" "/orgs/${REPO_OWNER}/packages/container/${PACKAGE_ENCODED}/versions" | jq -r "[.[] | select(.metadata.container.tags[] | contains(\"${FLAVOR}\"))] | .[0].metadata.container.tags[0]")

              if [[ "$TAG" == "null" ]]; then
                echo "No tag found for package ${PACKAGE} with flavor ${FLAVOR}"
                continue
              else
                OCI_REF="ghcr.io/${REPO_OWNER}/${PACKAGE}"
                uds zarf package inspect sbom "oci://${OCI_REF}:${TAG}"
              fi
            done
          done

          mkdir -p sboms
          mv $(yq e '.metadata.name' zarf.yaml)/*.json sboms/

          SBOM_JSON="[]"

          for sbom in sboms/*; do
            SBOM_NAME=$(basename "$sbom")
            SBOM_JSON=$(echo "${SBOM_JSON}" | jq -c --arg sbomName "${SBOM_NAME}" '. + [{sbomName: $sbomName}]')
          done

          echo "sboms=${SBOM_JSON}" >> "$GITHUB_OUTPUT"

      - name: Upload SBOMs
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: all-sboms
          path: sboms/

  get-images:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.get-images.outputs.images }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install UDS CLI
        uses: defenseunicorns/setup-uds@ab842abcad1f7a3305c2538e3dd1950d0daacfa5 # v1.0.1
        with:
          version: v${{ inputs.udsCliVersion }}

      - name: Get Images
        id: get-images
        run: |
          IMAGES=$(uds zarf tools yq -r -o=json -I=0 '[.components.[].images? // []] | flatten | unique | map(select((test(".sig") | not) and (test(".att") | not)))' ${{ inputs.zarfYamlPath }})
          echo "images=$IMAGES" >> "$GITHUB_OUTPUT"

  scan-sboms:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.get-sboms.outputs.sboms) }}
    needs: get-sboms
    steps:
      - name: Download SBOMs from GitHub Actions Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: all-sboms

      - name: Scan SBOM
        uses: anchore/scan-action@be7a22da4f22dde446c4c4c099887ff5b256526c # v6.3.0
        id: scan
        with:
          sbom: ${{ matrix.sbomName }}
          fail-build: false
          output-format: cyclonedx-json

      - name: Format artifact name
        id: format-artifact-name
        shell: bash
        run: |
          NAME=$(jq -r '.metadata.component.name + "@" + .metadata.component.version' ${{ steps.scan.outputs.cyclonedx-json }})
          NAME="${NAME//\//_}"
          NAME="${NAME/docker.io_library_/}"
          mv ${{ steps.scan.outputs.cyclonedx-json }} "${NAME}.json"
          echo "artifactName=${NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload scan results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: scan-sbom-${{ steps.format-artifact-name.outputs.artifactName }}
          path: ${{ steps.format-artifact-name.outputs.artifactName }}.json

  scan-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.get-images.outputs.images) }}
    needs: get-images
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install UDS CLI
        uses: defenseunicorns/setup-uds@ab842abcad1f7a3305c2538e3dd1950d0daacfa5 # v1.0.1
        with:
          version: v${{ inputs.udsCliVersion }}

      - name: Environment setup
        run: |
            echo "MARU_AUTH=\"{\"raw.githubusercontent.com\": \"${{ secrets.GITHUB_TOKEN }}\"}\"" >> "GITHUB_ENV"
            uds run actions:setup-environment \
            --set REGISTRY1_USERNAME="${{ secrets.IRON_BANK_ROBOT_USERNAME }}" \
            --set REGISTRY1_PASSWORD="${{ secrets.IRON_BANK_ROBOT_PASSWORD }}" \
            --set GH_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            --set RAPIDFORT_USERNAME="${{ secrets.RAPIDFORT_USERNAME }}" \
            --set RAPIDFORT_PASSWORD="${{ secrets.RAPIDFORT_PASSWORD }}"
        shell: bash

      - name: Scan image
        id: scan
        uses: anchore/scan-action@be7a22da4f22dde446c4c4c099887ff5b256526c # v6.3.0
        with:
          image: ${{ matrix.image }}
          fail-build: false
          output-format: cyclonedx-json

      - name: Format artifact name
        id: format-artifact-name
        shell: bash
        run: |
          NAME=$(jq -r '.metadata.component.name + "@" + .metadata.component.version' ${{ steps.scan.outputs.cyclonedx-json }})
          NAME="${NAME//\//_}"
          NAME="${NAME/docker.io_library_/}"
          mv ${{ steps.scan.outputs.cyclonedx-json }} "${NAME}.json"
          echo "artifactName=${NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload scan results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: scan-image-${{ steps.format-artifact-name.outputs.artifactName }}
          path: ${{ steps.format-artifact-name.outputs.artifactName }}.json

  compare-scans:
    runs-on: ubuntu-latest
    needs: [scan-sboms, scan-images]
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install UDS CLI
        uses: defenseunicorns/setup-uds@ab842abcad1f7a3305c2538e3dd1950d0daacfa5 # v1.0.1
        with:
          version: v${{ inputs.udsCliVersion }}

      - name: Environment setup
        run: |
          uds run actions:install-deps
        shell: bash

      - name: Download sbom scan results from GitHub Actions Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: sbom-scan-results
          pattern: scan-sbom-*
          merge-multiple: true

      - name: Download image scan results from GitHub Actions Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: image-scan-results
          pattern: scan-image-*
          merge-multiple: true

      - name: Compare scans
        id: compare-scans
        shell: bash
        run: |
          sbomScans=$(ls sbom-scan-results)
          imageScans=$(ls image-scan-results)

          COMMENT_MARKDOWN=""

          for imageScan in $imageScans; do
            imageName=$(echo "$imageScan" | cut -d "@" -f 1)
            imageScanned="false"

            for sbomScan in $sbomScans; do
              sbomName=$(echo "$sbomScan" | cut -d "@" -f 1)

              if [[ "$imageName" == "$sbomName" ]]; then
                echo "Match found: $imageName with $sbomName"
                # Allow different images is necessary because of implied urls with docker hub images (i.e. docker.io/library isn't always present)
                COMMENT_MARKDOWN+=$(uds-pk compare-scans "sbom-scan-results/$sbomScan" "image-scan-results/$imageScan" --allow-different-images)
                COMMENT_MARKDOWN+=$'\n'
                imageScanned="true"
                break
              fi
              echo "No match found: $imageName with sbom: $sbomName"
            done

            if [[ "$imageScanned" == "false" ]]; then
              echo "No match found for new image: $imageName"
              COMMENT_MARKDOWN+="### No comparable image found, assuming new image"
              COMMENT_MARKDOWN+=$'\n'
              COMMENT_MARKDOWN+=$(uds-pk compare-scans "image-scan-results/$imageScan" "image-scan-results/$imageScan")
              COMMENT_MARKDOWN+=$'\n'
            fi
          done

          echo "${COMMENT_MARKDOWN}" > comment.md

          pipx install mdformat

          mdformat comment.md

          CHAR_COUNT=$(wc -m comment.md | cut -d ' ' -f1)

          echo "Characters in comparison: ${CHAR_COUNT}"

          if [[ $CHAR_COUNT -gt 65536 ]]; then
            echo "artifact=true" >> "$GITHUB_OUTPUT"
          else
            echo "artifact=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Post markdown as comment
        if: ${{ steps.compare-scans.outputs.artifact == 'false' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }} \
            --body-file comment.md \
            --edit-last \
            --create-if-none

      - name: Upload comparison results
        id: upload-comparison-results
        if: ${{ steps.compare-scans.outputs.artifact == 'true' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: scan-comparison
          path: comment.md

      - name: Post comment about artifact
        if: ${{ steps.compare-scans.outputs.artifact == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        # If the comment is too long, means there's a lot of images so we want to have them collapsed to minimize the comment size
        run: |
          {
            echo "Full scan comparison results are too large to post as a comment. Link to full results artifact: [Results](${{ steps.upload-comparison-results.outputs.artifact-url}})"
            echo "Summarized results are below:"
            echo "<details>"
            echo
            sed '/<details>/,/<\/details>/d' comment.md | sed '/^______________________________________________________________________$/{
            i\
            </details>
            a\
            <details>
            d
            }' | sed -E 's/^(### )([^`]+)( `)/<summary>\2<\/summary>\n\n\0/'
          } >> summary.md
           tac summary.md | sed '0,/<details>/ s/<details>//' | tac > summary-done.md
          gh pr comment ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }} \
            --body-file summary-done.md \
            --edit-last \
            --create-if-none
