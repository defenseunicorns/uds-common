# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

name: callable-auto-update
    # Scan the sboms in the package, and compare to the current upstream images of the same tag. If
    # there are less cves in any image and no images have more cves, then bump the uds version to trigger
    # a new release.

on:
  workflow_call:
    inputs:
      udsCliVersion:
        description: The uds-cli version to install
        # renovate: datasource=github-tags depName=defenseunicorns/uds-cli versioning=semver
        default: 0.27.6
        type: string
      zarfYamlPath:
        description: The path to the zarf.yaml file
        default: zarf.yaml
        type: string
      packagePrefix:
        description: The prefix for public packages
        default: ""
        type: string
      privatePackagePrefix:
        description: The prefix for private packages
        default: private
        type: string
      dry-run:
        description: Enable dry-run mode, which doesn't commits changes to the repository.
        default: false
        type: boolean

# Permissions for the GITHUB_TOKEN used by the workflow.
permissions:
  contents: write # Allows us to read files from the repository for scanning, and writing the bumped releaser.yaml if applicable.
  packages: read  # Allows us to pull the sboms from the published packages for comparison.

jobs:
  get-flavors:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get flavors
        id: get-flavors
        run: |
          FLAVORS="$(yq -o=json -I=0 '[.components[].only.flavor]' ${{ inputs.zarfYamlPath }})"
          echo "flavors=${FLAVORS}" >> "$GITHUB_OUTPUT"

  scan-flavor:
    needs: get-flavors
    strategy:
      matrix:
        flavor: ${{ fromJson(needs.get-flavors.outputs.flavors) }}
    uses: ./.github/workflows/callable-auto-update-flavor.yaml
    with:
      udsCliVersion: ${{ inputs.udsCliVersion }}
      zarfYamlPath: ${{ inputs.zarfYamlPath }}
      packagePrefix: ${{ inputs.packagePrefix }}
      privatePackagePrefix: ${{ inputs.privatePackagePrefix }}
      flavor: ${{ matrix.flavor }}

  commit-changes:
    runs-on: ubuntu-latest
    needs: scan-flavor
    steps:
      - name: Download Scan Results
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: scan-results
          pattern: update-*

      - name: Check if any flavors need to be bumped
        id: decide-bump
        run: |
          UPDATES=$(ls -1 scan-results/)
          if [ -z "$UPDATES" ]; then
            echo "No updates found."
            echo "bump=false" >> "$GITHUB_OUTPUT"
          else
            echo "Updates found:"
            echo "${UPDATES}"
            echo "bump=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        if: ${{ steps.decide-bump.outputs.bump == 'true' }}

      - name: Bump versions in releaser.yaml
        if: ${{ steps.decide-bump.outputs.bump == 'true' }}
        run: |
          echo "Bumping versions in releaser.yaml"
          for update in scan-results/*; do
            flavor=$(basename "$update" | cut -d '-' -f 1)
            version=$(yq '.flavors[] | select(.name = env(flavor)).version' releaser.yaml)

            # Strip the last number and increment it
            main_version=${version%.*}
            uds_version=${version##*.}
            new_version="${main_version}.$((uds_version + 1))"

            yq -i '
              (.flavors[]
                | select(.name = env(flavor))
                | .version
              ) = env(new_version)
            ' releaser.yaml
          done

          echo "New releaser.yaml"
          cat releaser.yaml

      - name: Commit and push changes
        if: ${{ steps.decide-bump.outputs.bump == 'true' && inputs.dry-run != 'false' }}
        run: |
          UPDATES="$(find scan-results/ -type f -print0 | xargs -0 cat)"
          git config --local user.name "Defense Unicorns"
          git config --local user.email "doug-defense-unicorns@users.noreply.github.com"
          git add releaser.yaml
          git commit -m "chore(images): update due to rebuilt images being more secure" -m "${UPDATES}"
          git push

    # steps:
    #   - name: Commit and Push Changes
    #     if: ${{ steps.decide-bump.outputs.bump == 'true' && inputs.dry-run != 'false' }}
    #     run: |
    #       git config --local user.name "Defense Unicorns"
    #       git config --local user.email "doug-defense-unicorns@users.noreply.github.com"
    #       git add releaser.yaml
    #       git commit -m "chore(images): update due to rebuilt image being more secure" -m ""

  # scan-images:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       image: ${{ fromJson(needs.get-images.outputs.images) }}
  #   needs: get-images
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

  #     - name: Install UDS CLI
  #       uses: defenseunicorns/setup-uds@ab842abcad1f7a3305c2538e3dd1950d0daacfa5 # v1.0.1
  #       with:
  #         version: v${{ inputs.udsCliVersion }}

  #     - name: Environment setup
  #       run: |
  #           echo "MARU_AUTH=\"{\"raw.githubusercontent.com\": \"${{ secrets.GITHUB_TOKEN }}\"}\"" >> "GITHUB_ENV"
  #           uds run actions:setup-environment \
  #           --set REGISTRY1_USERNAME="${{ secrets.IRON_BANK_ROBOT_USERNAME }}" \
  #           --set REGISTRY1_PASSWORD="${{ secrets.IRON_BANK_ROBOT_PASSWORD }}" \
  #           --set GH_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
  #           --set RAPIDFORT_USERNAME="${{ secrets.RAPIDFORT_USERNAME }}" \
  #           --set RAPIDFORT_PASSWORD="${{ secrets.RAPIDFORT_PASSWORD }}"
  #       shell: bash

  #     - name: Scan image
  #       id: scan
  #       uses: anchore/scan-action@7c05671ae9be166aeb155bad2d7df9121823df32 # v6.1.0
  #       with:
  #         image: ${{ matrix.image }}
  #         fail-build: false
  #         output-format: cyclonedx-json

  #     - name: Format artifact name
  #       id: format-artifact-name
  #       shell: bash
  #       run: |
  #         NAME=$(jq -r '.metadata.component.name + "@" + .metadata.component.version' ${{ steps.scan.outputs.cyclonedx-json }})
  #         NAME="${NAME//\//_}"
  #         NAME="${NAME/docker.io_library_/}"
  #         mv ${{ steps.scan.outputs.cyclonedx-json }} "${NAME}.json"
  #         echo "artifactName=${NAME}" >> "$GITHUB_OUTPUT"

  #     - name: Upload scan results
  #       uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
  #       with:
  #         name: scan-image-${{ steps.format-artifact-name.outputs.artifactName }}
  #         path: ${{ steps.format-artifact-name.outputs.artifactName }}.json

  # compare-scans:
  #   runs-on: ubuntu-latest
  #   needs: [scan-sboms, scan-images]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

  #     - name: Install UDS CLI
  #       uses: defenseunicorns/setup-uds@ab842abcad1f7a3305c2538e3dd1950d0daacfa5 # v1.0.1
  #       with:
  #         version: v${{ inputs.udsCliVersion }}

  #     - name: Environment setup
  #       run: |
  #         uds run actions:install-deps
  #       shell: bash

  #     - name: Download sbom scan results from GitHub Actions Artifacts
  #       uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
  #       with:
  #         path: sbom-scan-results
  #         pattern: scan-sbom-*
  #         merge-multiple: true

  #     - name: Download image scan results from GitHub Actions Artifacts
  #       uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
  #       with:
  #         path: image-scan-results
  #         pattern: scan-image-*
  #         merge-multiple: true

  #     - name: Compare scans
  #       id: compare-scans
  #       shell: bash
  #       run: |
  #         sbomScans=$(ls sbom-scan-results)
  #         imageScans=$(ls image-scan-results)

  #         COMMENT_MARKDOWN=""

  #         for imageScan in $imageScans; do
  #           imageName=$(echo "$imageScan" | cut -d "@" -f 1)
  #           imageScanned="false"

  #           for sbomScan in $sbomScans; do
  #             sbomName=$(echo "$sbomScan" | cut -d "@" -f 1)

  #             if [[ "$imageName" == "$sbomName" ]]; then
  #               echo "Match found: $imageName with $sbomName"
  #               # Allow different images is necessary because of implied urls with docker hub images (i.e. docker.io/library isn't always present)
  #               COMMENT_MARKDOWN+=$(uds-pk compare-scans "sbom-scan-results/$sbomScan" "image-scan-results/$imageScan" --allow-different-images)
  #               COMMENT_MARKDOWN+=$'\n'
  #               imageScanned="true"
  #               break
  #             fi
  #             echo "No match found: $imageName with sbom: $sbomName"
  #           done

  #           if [[ "$imageScanned" == "false" ]]; then
  #             echo "No match found for new image: $imageName"
  #             COMMENT_MARKDOWN+="### No comparable image found, assuming new image"
  #             COMMENT_MARKDOWN+=$'\n'
  #             COMMENT_MARKDOWN+=$(uds-pk compare-scans "image-scan-results/$imageScan" "image-scan-results/$imageScan")
  #             COMMENT_MARKDOWN+=$'\n'
  #           fi
  #         done

  #         echo "${COMMENT_MARKDOWN}" > comment.md

  #         pipx install mdformat

  #         mdformat comment.md

  #         CHAR_COUNT=$(wc -m comment.md | cut -d ' ' -f1)

  #         echo "Characters in comparison: ${CHAR_COUNT}"

  #         if [[ $CHAR_COUNT -gt 65536 ]]; then
  #           echo "artifact=true" >> "$GITHUB_OUTPUT"
  #         else
  #           echo "artifact=false" >> "$GITHUB_OUTPUT"
  #         fi

  #     - name: Post markdown as comment
  #       if: ${{ steps.compare-scans.outputs.artifact == 'false' }}
  #       env:
  #         GH_TOKEN: ${{ github.token }}
  #       run: |
  #         gh pr comment ${{ github.event.pull_request.number }} \
  #           --repo ${{ github.repository }} \
  #           --body-file comment.md \
  #           --edit-last \
  #           --create-if-none

  #     - name: Upload comparison results
  #       id: upload-comparison-results
  #       if: ${{ steps.compare-scans.outputs.artifact == 'true' }}
  #       uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
  #       with:
  #         name: scan-comparison
  #         path: comment.md

  #     - name: Post comment about artifact
  #       if: ${{ steps.compare-scans.outputs.artifact == 'true' }}
  #       env:
  #         GH_TOKEN: ${{ github.token }}
  #       # If the comment is too long, means there's a lot of images so we want to have them collapsed to minimize the comment size
  #       run: |
  #         {
  #           echo "Full scan comparison results are too large to post as a comment. Link to full results artifact: [Results](${{ steps.upload-comparison-results.outputs.artifact-url}})"
  #           echo "Summarized results are below:"
  #           echo "<details>"
  #           echo
  #           sed '/<details>/,/<\/details>/d' comment.md | sed '/^______________________________________________________________________$/{
  #           i\
  #           </details>
  #           a\
  #           <details>
  #           d
  #           }' | sed -E 's/^(### )([^`]+)( `)/<summary>\2<\/summary>\n\n\0/'
  #         } >> summary.md
  #          tac summary.md | sed '0,/<details>/ s/<details>//' | tac > summary-done.md
  #         gh pr comment ${{ github.event.pull_request.number }} \
  #           --repo ${{ github.repository }} \
  #           --body-file summary-done.md \
  #           --edit-last \
  #           --create-if-none
