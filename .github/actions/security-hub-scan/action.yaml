name: security-hub-scan
description: Scans a zarf package with uds-security-hub

inputs:
  path:
    description: Path to the zarf package to scan
    required: true
  format:
    description: Scan output format
    default: json
  version:
    description: Version of uds-security-hub to use
    default: latest
  cosign-version:
    description: Version of cosign to use for signing results
    default: v2.4.0

outputs:
  cve-scan:
    description: A filename that includes the results in input.format
    value: ${{ steps.scan.outputs.cve-scan }}
  cosign-bundle:
    description: A file that includes the cosign bundle for verifying authenticity
    value: ${{ steps.cosign.outputs.bundle }}

runs:
  using: composite
  steps:
    - name: run uds security-hub:scan
      run: |
        uds run security-hub:scan \
          --set PKG_PATH=${{ .inputs.path }} \
          --set OUTPUT_FORMAT=${{ .inputs.format }} \
          --set VERSION=${{ .inputs.version }} \
          --set COSIGN_VERSION=${{ .inputs.cosign-version }}
      shell: bash

    # - name: create tmpdir for output
    #   id: tmpdir
    #   run: |
    #     tmpdir=$(mktemp -d)
    #     echo "dir=$tmpdir" >> $GITHUB_OUTPUT
    #   shell: bash

    # - name: use uds-security-hub to scan a package
    #   id: scan
    #   run: |
    #     OUTPUT_FILE=${{ steps.tmpdir.outputs.dir }}/cve-scan.${{ inputs.format }}

    #     FILE_TO_SCAN=$(realpath ${{ inputs.path }})

    #     docker run --rm \
    #         --pull always \
    #         -v $FILE_TO_SCAN:$FILE_TO_SCAN \
    #       ghcr.io/defenseunicorns/uds-security-hub:${{ inputs.version }} \
    #         --package-path $FILE_TO_SCAN \
    #         --output-format ${{ inputs.format }} \
    #         > "${OUTPUT_FILE}"

    #     echo "cve-scan=${OUTPUT_FILE}" >> "$GITHUB_OUTPUT"
    #   shell: bash

    # - name: sign results
    #   id: cosign
    #   env:
    #     COSIGN_EXPERIMENTAL: "true"
    #   run: |
    #     COSIGN_BUNDLE="${{ steps.tmpdir.outputs.dir }}/cosign.bundle"
    #     cosign sign-blob --bundle $COSIGN_BUNDLE --yes ${{ steps.scan.outputs.cve-scan }}
    #     echo "bundle=${COSIGN_BUNDLE}" >> "$GITHUB_OUTPUT"
    #   shell: bash

    # - name: verify cosign results
    #   env:
    #     COSIGN_EXPERIMENTAL: "true"
    #   run: |
    #     cosign verify-blob --bundle ${{ steps.cosign.outputs.bundle }} ${{ steps.scan.outputs.cve-scan }} \
    #         --certificate-identity-regexp="https://github.com/${{ github.repository }}/" \
    #         --certificate-oidc-issuer="https://token.actions.githubusercontent.com"
    #   shell: bash
