# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

variables:
  - name: FLAVOR
    default: upstream

tasks:
  - name: package
    description: Create the UDS Zarf Package in the repository
    inputs:
      options:
        description: For setting create time variables and flags
      path:
        description: Path to the zarf package definition being created
        default: .
      architecture:
        description: The architecture of the package to create
        default: ${UDS_ARCH}
      config:
        description: Optionally provide a path to a Zarf config file
        default: ""
        required: false
    actions:
      - env:
          - ZARF_CONFIG=${{ .inputs.config }}
        cmd: ./uds zarf package create ${{ .inputs.path }} --confirm --no-progress --architecture="${{ .inputs.architecture }}" --flavor "${FLAVOR}" ${{ .inputs.options }}

  - name: recreate-latest-tag-package
    description: Recreate the UDS Zarf Package in the repository
    inputs:
      options:
        description: For setting create time variables and flags
      path:
        description: Path to the zarf package definition being created
        default: .
      architecture:
        description: The architecture of the package to create
        default: ${UDS_ARCH}
      config:
        description: Optionally provide a path to a Zarf config file
        default: ""
        required: false
      flavor:
        description: The flavor of the package to publish
        default: ${FLAVOR}
      ignored_versions:
        description: Regex for versions to ignore (used by filter logic), useful when version scheme has changed and automatic sorting is not pulling the latest version
        default: ""
    actions:
      - description: Remove copied repo
        cmd: rm -rf recreate-test

      - description: Copy repo into the recreate-test folder
        shell:
          linux: bash
          darwin: bash
        cmd: |
          mkdir recreate-test

          shopt -s extglob dotglob
          cp -r !(recreate-test) recreate-test
          shopt -u dotglob

      - env:
          - ZARF_CONFIG=${{ .inputs.config }}
        shell:
          linux: bash
          darwin: bash
        dir: recreate-test
        cmd: |
          git reset --hard HEAD

          # Get the latest tag matching the FLAVOR pattern
          # shellcheck disable=SC2157
          if [[ -z "${{ .inputs.ignored_versions }}" ]]; then
            REPUBLISH_TAG=$(git tag --list "*-${{ .inputs.flavor }}" --sort=-v:refname | head -n 1)
          else
            REPUBLISH_TAG=$(git tag --list "*-${{ .inputs.flavor }}" --sort=-v:refname | grep -v "${{ .inputs.ignored_versions }}" | head -n 1)
          fi

          # Checkout the tag if it exists
          if [[ -n "$REPUBLISH_TAG" ]]; then
              git checkout "$REPUBLISH_TAG"
          else
              echo "No tag found for flavor '${{ .inputs.flavor }}'. Skipping."
              exit 1
          fi

          uds-pk release update-yaml ${{ .inputs.flavor }}

          ./uds zarf package create ${{ .inputs.path }} --confirm --no-progress --architecture="${{ .inputs.architecture }}" --flavor "${{ .inputs.flavor }}" ${{ .inputs.options }}

          PACKAGE_NAME=$(cat ${{ .inputs.path }}/zarf.yaml | ./uds zarf tools yq .metadata.name)
          LOCAL_VERSION=$(cat ${{ .inputs.path }}/zarf.yaml | ./uds zarf tools yq .metadata.version)
          # shellcheck disable=SC2157
          FLAVOR_SUFFIX=$(if [ -z "${{ .inputs.flavor }}" ]; then echo ""; else echo "-${{ .inputs.flavor }}"; fi)

          mv "${{ .inputs.path }}/zarf-package-${PACKAGE_NAME}-${{ .inputs.architecture }}-${LOCAL_VERSION}${FLAVOR_SUFFIX}.tar.zst" "../${{ .inputs.path }}/zarf-package-${PACKAGE_NAME}-${{ .inputs.architecture }}-${LOCAL_VERSION}${FLAVOR_SUFFIX}.tar.zst"

      - description: Remove the recreate-test folder
        cmd: rm -rf recreate-test

      - description: Reversion the bundle.yaml to match the latest tag
        cmd: uds-pk release update-yaml ${{ .inputs.flavor }}

  - name: test-bundle
    description: Create the test bundle (bundling package + dependencies for testing)
    inputs:
      options:
        description: For setting create time variables and flags
      path:
        description: Path relative to the repositories root where the uds-bundle.yaml lives
        default: bundle
      config:
        description: Path to the bundle config file. Defaults to bundle/uds-config.yaml.
        default: bundle/uds-config.yaml
      architecture:
        description: The architecture of the bundle to create
        default: ${UDS_ARCH}
    actions:
      - env:
          - UDS_CONFIG=${{ .inputs.config }}
        cmd: |
          # Find any flavored packages in the target directory
          echo "Looking for ${FLAVOR} flavored packages in '.'"

          # Find all flavored packages (with -flavor suffix before .tar.zst)
          for FLAVORED_PACKAGE in $(find . -maxdepth 1 -name "zarf-package-*-${{ .inputs.architecture }}-dev-${FLAVOR}.tar.zst" 2>/dev/null || echo ""); do
            # Extract the base name without flavor
            BASE_NAME=$(echo "${FLAVORED_PACKAGE}" | sed 's/\(zarf-package-.*-${{ .inputs.architecture }}-dev\)-.*\.tar\.zst/\1.tar.zst/')
            
            echo "Found ${FLAVOR} flavored package: ${FLAVORED_PACKAGE}"
            echo "Creating non-flavored version: ${BASE_NAME}"
            
            # Copy to non-flavored version (overwrite if exists)
            cp "${FLAVORED_PACKAGE}" "${BASE_NAME}"
          done
          
          # Proceed with bundle creation regardless of package file status
          ./uds create ${{ .inputs.path }} --confirm --no-progress --architecture="${{ .inputs.architecture }}" ${{ .inputs.options }}
