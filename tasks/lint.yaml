# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

variables:
  - name: OSCALFILES
    default: ./oscal-component.yaml

tasks:
  - name: deps
    description: Install linting tool dependencies
    actions:
      - description: Install yamllint via pip
        cmd: CMD=pip && which $CMD || CMD=pip3 && $CMD install yamllint>=1.30.0
      - description: Install addlicense via go
        # renovate: datasource=github-tags depName=google/addlicense versioning=semver
        cmd: GOPATH="$HOME/go" go install github.com/google/addlicense@v1.1.1

  - name: all
    description: Run all linting commands
    actions:
      - task: yaml
      - task: oscal
      - task: shell
      - task: license

  - name: yaml
    description: Run YAML linting checks
    actions:
      # requires yamllint to be installed either from pip or brew
      - description: Lint YAML files
        cmd: yamllint . -c .yamllint --no-warnings

  - name: oscal
    description: Run linting checks on OSCAL
    actions:
      - description: Lint OSCAL files
        shell:
          linux: bash
          darwin: bash
        cmd: |
          IFS=',' read -r -a OSCALARRAY <<< "$OSCALFILES"
          for file in "${OSCALARRAY[@]}"; do
            if [ ! -f "$file" ]; then
              echo "⚠️ WARNING: file $file does not exist."
              exit 0
            fi
          done

          lula tools lint -f "$OSCALFILES"

  - name: shell
    description: Run shellcheck on all Maru tasks, GitHub workflows, and local shell scripts
    actions:
      - description: Lint shell scripts in Maru tasks, GitHub workflows and .sh files
        shell:
          linux: bash
          darwin: bash
        cmd: |
          # These settings:
          # -x Assume files exist (since some scripts run on VMs)
          # -e SC2016 Ignore unexpanded env vars (since sometimes we want to dynamically add a var to something like .bashrc)
          # -e SC2050 Ignore if statements that are static (inputs / expressions are filtered for shellcheck to work which in some expressions makes them static)
          # -e SC2001 Ignore sed replace suggestions (${text//search/replacement} syntax doesn't support regex so this suggestion often won't work)
          # -e SC2002 Ignore rejection of `cat |` (redirection syntax is not always familiar to developers and while cat _could_ not exist that is extremely unlikely)
          # -e SC2181 Ignore rejection of $? ($? can be confusing in some circumstances but also more readable in others with more complex commands)
          export SHELLCHECK_OPTS="-x -e SC2016 -e SC2050 -e SC2001 -e SC2002 -e SC2181"

          # Function to lint scripts inside `---` delimited files
          lint_scripts() {
            local file="$1"
            local raw_scripts="$2"

            echo "Processing $file..."

            # Temporary variable to hold the current element
            current_element=""

            # Read input line by line
            while IFS= read -r line; do
                if [ "$line" = "---" ]; then
                    # If we hit '---', print the current element if not empty
                    if [ -n "$current_element" ]; then
                        echo "$current_element" | shellcheck -
                        current_element=""
                    fi
                else
                    # Otherwise, keep adding to the current element
                    current_element="$current_element$line
                    "
                fi
            done <<< "$raw_scripts"

            # Process the last element if it's not empty
            if [ -n "$current_element" ]; then
              echo "$current_element" | shellcheck -
            fi
          }

          # Lint all scripts in Maru tasks
          for yaml_file in tasks.yaml tasks/*.yaml; do

            # Look through all of the task actions and format .cmd entries with a dynamic shebang based on .shell.linux
            yaml_query='.tasks[].actions[] | "---\n#!/bin/"+(.shell.linux // "sh")+"\n"+.cmd'

            # Query the actual YAML file for the commands
            raw_cmds=$(uds zarf tools yq -r "$yaml_query" "$yaml_file")

            # Strip any ${{ }} templates with the word "maru-expression" for compatibility
            raw_scripts=$(echo "$raw_cmds" | sed 's/\${{[^}]*}}/maru-expression/g')

            # If this file has scripts, lint them
            if [ -n "$raw_scripts" ]; then
              lint_scripts "$yaml_file" "$raw_scripts"
            fi
          done

          # Lint all .sh files in the current directory
          echo "Processing .sh files..."
          find . -type f -name "*.sh" -exec shellcheck {} +

          # Lint all scripts in GitHub workflows
          for yaml_file in .github/workflows/*.yaml; do

            # Look through all of the job steps and format .run entries with a dynamic shebang based on .shell
            yaml_query='.jobs[].steps[] | "---\n#!/bin/"+(.shell // "sh")+"\n"+.run'

            # Query the actual YAML file for the commands
            raw_runs=$(uds zarf tools yq -r "$yaml_query" "$yaml_file")

            # Strip any ${{ }} templates with the word "github-expression" for compatibility
            raw_scripts=$(echo "$raw_runs" | sed 's/\${{[^}]*}}/github-expression/g')

            # If this file has scripts, lint them
            if [ -n "$raw_scripts" ]; then
              lint_scripts "$yaml_file" "$raw_scripts"
            fi
          done

  - name: license
    description: Lint for the SPDX license identifier being in source files
    actions:
      - shell:
          darwin: bash
          linux: bash
        cmd: |
          # check for addlicense bin
          if [ -x "$HOME/go/bin/addlicense" ]; then
              echo "addlicense installed in $HOME/go/bin"
          else
              echo "Error: addlicense is not installed in $HOME/go/bin" >&2
              exit 1
          fi

          ignore_flags=()
          while IFS= read -r line; do
            # Skip comments and empty lines
            [ -z "$line" ] || [[ "$line" =~ ^# ]] && continue
            # Add the line to ignore_flags array with quotes around it
            ignore_flags+=("-ignore" "\"$line\"")
          done < .gitignore

          # Construct the command as a string
          eval "$HOME/go/bin/addlicense -l \"AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial\" -check -s=only -v -c \"Defense Unicorns\" ${ignore_flags[*]} . 2>/dev/null"

  - name: fix-license
    description: Add the SPDX license identifier to source files
    actions:
      - shell:
          darwin: bash
          linux: bash
        cmd: |
          # check for addlicense bin
          if [ -x "$HOME/go/bin/addlicense" ]; then
              echo "addlicense installed in $HOME/go/bin"
          else
              echo "Error: addlicense is not installed in $HOME/go/bin" >&2
              exit 1
          fi

          ignore_flags=()
          while IFS= read -r line; do
            # Skip comments and empty lines
            [ -z "$line" ] || [[ "$line" =~ ^# ]] && continue
            # Add the line to ignore_flags array with quotes around it
            ignore_flags+=("-ignore" "\"$line\"")
          done < .gitignore

          # Construct the command as a string
          eval "$HOME/go/bin/addlicense -l \"AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial\" -s=only -v -c \"Defense Unicorns\" ${ignore_flags[*]} . 2>/dev/null"
