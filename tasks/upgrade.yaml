# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

includes:
  - utils: ./utils.yaml

variables:
  - name: FLAVOR
    default: upstream

tasks:
  - name: create-latest-tag-bundle
    description: Creates the test bundle at the latest tag in preparation for upgrade testing
    inputs:
      options:
        description: For setting create time variables and flags
        default: ""

      bundle_path:
        description: Path relative to the repositories root where the bundle needs to go
        default: bundle

      path:
        description: Path relative to the repositories root where the package needs to go
        default: .

      team:
        description: The team you want to pull the package from
        default: uds

      target_repo:
        description: The repository to pull from
        default: ghcr.io/defenseunicorns/packages

      architecture:
        description: The architecture of the package to create
        default: ${UDS_ARCH}

      dep_commands:
        description: Additional commands to run inside the old repo to setup dependencies
        default: ""

    actions:
      - task: utils:determine-repo
        with:
          team: ${{.inputs.team}}

      - description: Remove copied repo
        cmd: rm -rf upgrade-test

      - description: Copy repo into the upgrade-test folder
        shell:
          linux: bash
          darwin: bash
        cmd: |
          mkdir upgrade-test

          shopt -s extglob dotglob
          cp -r !(upgrade-test) upgrade-test
          shopt -u dotglob

      - description: Create test bundle of last tag
        shell:
          linux: bash
          darwin: bash
        dir: upgrade-test
        cmd: |
          git reset --hard HEAD
          BUNDLE_VERSION=$(cat ../${{ .inputs.bundle_path }}/uds-bundle.yaml | ./uds zarf tools yq .metadata.version)
          TAG="$(git describe --tags "$(git rev-list --tags --max-count=1)" 2>/dev/null || echo '')"
          git checkout "$TAG"

          # VARIABLES
          PACKAGE_NAME=$(cat ${{ .inputs.path }}/zarf.yaml | ./uds zarf tools yq .metadata.name)
          LATEST_VERSION=$(./uds zarf tools registry ls "${TARGET_REPO}/${PACKAGE_NAME}" | grep "${FLAVOR}" | sort -V | tail -1)
          BUNDLE_NAME=$(cat ${{ .inputs.bundle_path }}/uds-bundle.yaml | ./uds zarf tools yq .metadata.name)
          PREVIOUS_BUNDLE_VERSION=$(cat ${{ .inputs.bundle_path }}/uds-bundle.yaml | ./uds zarf tools yq .metadata.version)

          # Pulls latest published zarf package
          ./uds zarf package pull \
            "oci://${TARGET_REPO}/${PACKAGE_NAME}:${LATEST_VERSION}" \
            --no-progress \
            -o ${{ .inputs.path }}

          # Run any dependency commands (i.e. uds run dependencies:create)
          sh -c "${{ .inputs.dep_commands }}"

          # Checks if the zarf package is registry1 and ARM
          if [ "${FLAVOR}" != "registry1" ] || [ "${{ .inputs.architecture }}" != "arm64" ]; then

            # Creates and moves the bundle into the correct spot
            ./uds create ${{ .inputs.bundle_path }} \
              --architecture=${{ .inputs.architecture }} \
              --confirm \
              --no-progress \
              ${{ .inputs.options }}

            mv "${{ .inputs.bundle_path }}/uds-bundle-${BUNDLE_NAME}-${{ .inputs.architecture }}-${PREVIOUS_BUNDLE_VERSION}.tar.zst" "../${{ .inputs.bundle_path }}/uds-bundle-${BUNDLE_NAME}-${{ .inputs.architecture }}-${BUNDLE_VERSION}.tar.zst"
          else
            echo "::warning::⚠️ Registry1 bundles cannot be made for 'arm64'"
            exit 1
          fi

      - description: Remove the upgrade-test folder
        cmd: rm -rf upgrade-test
